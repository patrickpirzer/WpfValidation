<Window x:Class="Validation_IDataErrorInfo2.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Validation_IDataErrorInfo2"
        xmlns:vr="clr-namespace:Validation_IDataErrorInfo2.ValidationRules"
        mc:Ignorable="d"
        Title="MainWindow"
        Height="350"
        Width="525">
    <Window.Resources>
        <!--Style for displaying an error message from validation as tooltip.-->
        <Style x:Key="errorTemplate" TargetType="Control">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="True">
                            <Border Background="Red"
                                    DockPanel.Dock="right"
                                    Margin="-20,0,0,0"
                                    Width="15"
                                    Height="15"
                                    CornerRadius="10"
                                    ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                                <TextBlock Text="!"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"
                                           FontWeight="Bold"
                                           Foreground="White">
                                </TextBlock>
                            </Border>
                            <AdornedElementPlaceholder Name="customAdorner"
                                                       VerticalAlignment="Center" >
                                <Border BorderBrush="Red"
                                        BorderThickness="1" />
                            </AdornedElementPlaceholder>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--Additional style trigger for changing the background color of the textbox-->
            <Style.Triggers>
                <Trigger Property="Validation.HasError"
                         Value="True">
                    <Setter Property="Background"
                            Value="LightPink"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!--Style for controls of type TextBox-->
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource errorTemplate}">
            <Setter Property="Height"
                    Value="25"/>
            <Setter Property="VerticalAlignment"
                    Value="Top"/>
        </Style>

        <!--Style for controls of type ComboBox-->
        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource errorTemplate}">
            <Setter Property="Height"
                    Value="25"/>
            <Setter Property="VerticalAlignment"
                    Value="Top"/>
        </Style>

        <!--Disabling the Save-button by style not viewmodel-property-->
        <Style x:Key="isEnabled_save_button" TargetType="{x:Type Button}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=tbx_firstname, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=tbx_lastname, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=tbx_age, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=cbx_gender, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>-->
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Label Grid.Row="0"
               Grid.Column="0"
               Margin="5">First name</Label>

        <!--Input field for the first name-->
        <TextBox x:Name="tbx_firstname"
                 Grid.Row="0"
                 Grid.Column="1"
                 Margin="5"
                 ToolTip="The first name"
                 Text="{Binding FirstName, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
        </TextBox>

        <Label Grid.Row="1"
               Grid.Column="0"
               Margin="5">Last name</Label>

        <!--Input field for the last name-->
        <TextBox x:Name="tbx_lastname"
                 Grid.Row="1"
                 Grid.Column="1"
                 Margin="5"
                 ToolTip="The last name"
                 Text="{Binding LastName, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
        </TextBox>

        <Label Grid.Row="2"
               Grid.Column="0"
               Margin="5">Age</Label>

        <!--Input field for the age-->
        <TextBox x:Name="tbx_age"
                 Grid.Row="2"
                 Grid.Column="1"
                 Margin="5"
                 ToolTip="The age">
            <TextBox.Text>
                <Binding Path="Age" NotifyOnSourceUpdated="True" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <vr:AgeValidation MinAge="1" ValidatesOnTargetUpdated="True"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <Label Grid.Row="3"
               Grid.Column="0"
               Margin="5">Gender</Label>

        <!--Selection list for the gender-->
        <ComboBox x:Name="cbx_gender"
                  Grid.Row="3"
                  Grid.Column="1"
                  Margin="5"
                  ItemsSource="{Binding GenderList}"
                  SelectedValue="{Binding SelectedGender, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
        </ComboBox>

        <!--The save-button-->
        <Button x:Name="btn_save"
                Grid.Row="4"
                Grid.Column="1" Style="{StaticResource isEnabled_save_button}"
                Margin="5">Save</Button>

        <!--Another button just for checking at runtime if the error template works correctly.
            This button has no functionality.-->
        <Button x:Name="btn_test"
                Grid.Row="4"
                Grid.Column="2"
                Margin="5"
                Click="btn_test_Click">Test</Button>
    </Grid>
</Window>
