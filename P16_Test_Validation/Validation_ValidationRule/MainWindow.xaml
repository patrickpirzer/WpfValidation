<Window x:Class="Validation_ValidationRule.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Validation_ValidationRule"
        xmlns:vr="clr-namespace:Validation_ValidationRule.ValidationRules"
        mc:Ignorable="d"
        Title="Validation with ValidationRule"
        Height="350"
        Width="525">
    <Window.Resources>
        <!--Style for displaying an error message from validation as tooltip-->
        <!--<Style x:Key="{x:Type TextBox}"
               TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError"
                         Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding Path=(Validation.Errors).CurrentItem.ErrorContent, RelativeSource={x:Static RelativeSource.Self}}"/>
                    <Setter Property="Background"
                            Value="LightPink"/>
                </Trigger>
            </Style.Triggers>
            <Setter Property="Height"
                    Value="25"/>
            <Setter Property="VerticalAlignment"
                    Value="Top"/>
        </Style>-->

        <!--Style for displaying an error message from validation as tooltip.
            In that case the tooltip don't belong to the textbox itself but to an image on the right side.
            So its not overwritten by the tooltip of the textbox.-->
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="VerticalAlignment"
                    Value="Center"/>
            <Setter Property="Margin"
                    Value="0,2,40,2"/>
            <Setter Property="Height"
                    Value="25"/>
            <Setter Property="VerticalAlignment"
                    Value="Top"/>
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="true">
                            <Border Background="Red"
                                    DockPanel.Dock="right"
                                    Margin="5,0,0,0"
                                    Width="20"
                                    Height="20"
                                    CornerRadius="10"
                                    ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                                <TextBlock Text="!"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"
                                           FontWeight="Bold"
                                           Foreground="White">
                                </TextBlock>
                            </Border>
                            <AdornedElementPlaceholder Name="customAdorner"
                                                       VerticalAlignment="Center" >
                                <Border BorderBrush="Red"
                                        BorderThickness="1" />
                            </AdornedElementPlaceholder>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--Additional style trigger for changing the background color of the textbox-->
            <Style.Triggers>
                <Trigger Property="Validation.HasError"
                         Value="true">
                    <Setter Property="Background"
                            Value="LightPink"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="5*"/>
        </Grid.ColumnDefinitions>

        <Label x:Name="lbl_age"
               Grid.Row="0"
               Grid.Column="0"
               Margin="5">Age</Label>

        <TextBox x:Name="txt_age"
                 Grid.Row="0"
                 Grid.Column="1"
                 Margin="5"
                 ToolTip="The age">
            <TextBox.Text>
                <Binding Path="Age" NotifyOnSourceUpdated="True" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <vr:StringToIntValidationRule ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <TextBlock Grid.Row="0"
                   Grid.Column="2"
                   Margin="40,5,5,5"
                   TextWrapping="WrapWithOverflow">
            Validation by binding to a specialized ValidationRule-class. In that case the user has to input a valid number.
        </TextBlock>

        <Label x:Name="lbl_age2"
               Grid.Row="1"
               Grid.Column="0"
               Margin="5">Age</Label>

        <TextBox x:Name="txt_age2"
                 Grid.Row="1"
                 Grid.Column="1"
                 Margin="5"
                 ToolTip="The age">
            <TextBox.Text>
                <Binding Path="Age" NotifyOnSourceUpdated="True" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <vr:StringToIntValidationRule ValidationStep="RawProposedValue"/>
                        <vr:AgeRangeRule Min="21" Max="130"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <TextBlock Grid.Row="1"
                   Grid.Column="2"
                   Margin="40,5,5,5"
                   TextWrapping="WrapWithOverflow">
            Validation by binding to two specialized ValidationRule-classes. In that case the user has to input a valid number, which lies between the defined borders 21 and 130.
        </TextBlock>

        <Label x:Name="lbl_name"
               Grid.Row="2"
               Grid.Column="0"
               Margin="5">Name</Label>

        <TextBox x:Name="txt_name"
                 Grid.Row="2"
                 Grid.Column="1"
                 Margin="5"
                 ToolTip="The name">
            <TextBox.Text>
                <Binding Path="PersonName" NotifyOnSourceUpdated="True" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <!--The attribute ValidatesOnTargetUpdated must be set to TRUE so that the validation starts all at once when the window was loaded-->
                        <vr:StringNotEmptyRule ValidatesOnTargetUpdated="True"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <TextBlock Grid.Row="2"
                   Grid.Column="2"
                   Margin="40,5,5,5"
                   TextWrapping="WrapWithOverflow">
            Validation by binding to two specialized ValidationRule-classes. In that case the user has to input a name.
        </TextBlock>
    </Grid>
</Window>
